#ifndef PBR_FUNCTIONS
#define PBR_FUNCTIONS
#include <Common.glslh>

//https://learnopengl.com/code_viewer_gh.php?code=src/6.pbr/2.2.1.ibl_specular/2.2.1.pbr.fs
//https://github.com/kidrigger/Blaze/blob/7e76de71e2e22f3b5e8c4c2c50c58e6d205646c6/Blaze/shaders/forward/fPBR.frag
//https://github.com/HighLo-Engine/HighLo-Engine/blob/master/HighLo/assets/shaders/Include/GLSL/Buffers.glslh

layout(std140, set=2, binding = 0) uniform SceneData
{
	vec3 CameraPosition; 
} u_Scene;
layout(std140, set=2,binding = 1) uniform RendererData
{
		vec4 CascadeSplits;
		bool ShowCascades;
		bool SoftShadows;
		float MaxShadowDistance;
		float ShadowFade;
		bool CascadeFading; 
		float CascadeTransitionFade;
}u_RendererData;

layout(std140, set = 2, binding = 2) uniform SkyBoxData
{
    vec3 TintColor;
    float Lod;
    float Intensity;
    float Roation;
}u_SkyBoxInfo;

struct DirectionalLight 
{
    vec3 Color;
    float Intensity;
    vec3 Direction;
    bool CastShadows;
    bool CastSoftShadow;
    float ShadowStrength;
    float ShadowSoftness;
};
layout(std140, set = 2, binding = 3) buffer DirectionalLightStorageBuffer {

    DirectionalLight Lights[];
} u_DirectionalLightData;

struct PointLight
{
	vec3 Position;
	float Intensity;
	vec3 Radiance;
	float MinRadius;
	float Radius;
	float Falloff;
	float LightSize;
	bool CastsShadows;
};

struct PBRParameters
{
	vec3 AlbedoColor;
	float Metalness;
	float Roughness;

	vec3 Normal;
	vec3 View;
	float NdotV;
} m_Params;

vec3 FresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

vec3 FresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}  

float DistributionGGX(vec3 N, vec3 H, float roughness){
   float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}

float GeometrySchlickGGX(float nDotV, float rough){
    float r = (rough + 1.0);
    float k = (r*r) / 8.0;

    float num = nDotV;
    float denom = 1 / (nDotV * (1.0 - k) + k);

    return num * denom;
}

float GeometrySmith(float nDotV, float nDotL, float rough){
    float ggx2  = GeometrySchlickGGX(nDotV, rough);
    float ggx1  = GeometrySchlickGGX(nDotL, rough);

    return ggx1 * ggx2;
}
#endif
