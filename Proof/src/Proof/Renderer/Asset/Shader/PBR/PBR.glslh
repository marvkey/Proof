#ifndef PBR_FUNCTIONS
#define PBR_FUNCTIONS
#include <Common.glslh>
#include <PBR/Lights.glslh>
//https://learnopengl.com/code_viewer_gh.php?code=src/6.pbr/2.2.1.ibl_specular/2.2.1.pbr.fs
//https://github.com/kidrigger/Blaze/blob/7e76de71e2e22f3b5e8c4c2c50c58e6d205646c6/Blaze/shaders/forward/fPBR.frag
//https://github.com/HighLo-Engine/HighLo-Engine/blob/master/HighLo/assets/shaders/Include/GLSL/Buffers.glslh

layout(std140, set=2, binding = 0) uniform SceneData
{
	vec3 CameraPosition; 
} u_Scene;
layout(std140, set=2,binding = 1) uniform RendererData
{
		vec4 CascadeSplits;
		bool ShowCascades;
		bool SoftShadows;
		float MaxShadowDistance;
		float ShadowFade;
		bool CascadeFading; 
		float CascadeTransitionFade;
}u_RendererData;

struct PBRParameters
{
	vec3 AlbedoColor;
	float Metalness;
	float Roughness;

	vec3 Normal;
	vec3 View;
	float NdotV;
} m_Params;

vec3 FresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

vec3 FresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}  

float DistributionGGX(vec3 N, vec3 H, float roughness){
   float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}

float GeometrySchlickGGX(float nDotV, float rough){
    float r = (rough + 1.0);
    float k = (r*r) / 8.0;

    float num = nDotV;
    float denom = 1 / (nDotV * (1.0 - k) + k);

    return num * denom;
}

float GeometrySmith(float nDotV, float nDotL, float rough)
{
    float ggx2  = GeometrySchlickGGX(nDotV, rough);
    float ggx1  = GeometrySchlickGGX(nDotL, rough);

    return ggx1 * ggx2;
}
float NdfGGX(float cosLh, float roughness)
{
	float alpha = roughness * roughness;
	float alphaSq = alpha * alpha;

	float denom = (cosLh * cosLh) * (alphaSq - 1.0) + 1.0;
	return alphaSq / (PI * denom * denom);
}
// Single term for separable Schlick-GGX below.
float GaSchlickG1(float cosTheta, float k)
{
	return cosTheta / (cosTheta * (1.0 - k) + k);
}

// Schlick-GGX approximation of geometric attenuation function using Smith's method.
float GaSchlickGGX(float cosLi, float NdotV, float roughness)
{
	float r = roughness + 1.0;
	float k = (r * r) / 8.0; // Epic suggests using this roughness remapping for analytic lights.
	return GaSchlickG1(cosLi, k) * GaSchlickG1(NdotV, k);
}
vec3 CalculatePointLights(in vec3 F0, vec3 worldPos)
{
	vec3 result = vec3(0.0);

    uvec2 tileIndex = uvec2( floor(gl_FragCoord.xy / 16) );
    uint startOffset = imageLoad(u_PointLightGrid, ivec2(tileIndex)).x;
	uint lightCount = imageLoad(u_PointLightGrid, ivec2(tileIndex)).y;
    for ( uint i = 0; i < lightCount; i++ )
	{
        uint lightIndex = s_PointLightIndexList[startOffset + i];
		PointLight light = s_PointLights.Lights[lightIndex];

		//if(light.Intensity == 0)
		//	continue;
		vec3 Li = normalize(light.Position - worldPos);
		float lightDistance = length(light.Position - worldPos);
		vec3 Lh = normalize(Li + m_Params.View);

		float attenuation = clamp(1.0 - (lightDistance * lightDistance) / (light.Radius * light.Radius), 0.0, 1.0);
		attenuation *= mix(attenuation, 1.0, light.Falloff);

		vec3 Lradiance = light.Colour * light.Intensity * attenuation;

		// Calculate angles between surface normal and various light vectors.
		float cosLi = max(0.0, dot(m_Params.Normal, Li));
		float cosLh = max(0.0, dot(m_Params.Normal, Lh));

		vec3 F = FresnelSchlickRoughness(max(0.0, dot(Lh, m_Params.View)), F0,m_Params.Roughness);
		float D = NdfGGX(cosLh, m_Params.Roughness);
		float G = GaSchlickGGX(cosLi, m_Params.NdotV, m_Params.Roughness);

		vec3 kd = (1.0 - F) * (1.0 - m_Params.Metalness);
		vec3 diffuseBRDF = kd * m_Params.AlbedoColor;

		// Cook-Torrance
		vec3 specularBRDF = (F * D * G) / max(Epsilon, 4.0 * cosLi * m_Params.NdotV);
		specularBRDF = clamp(specularBRDF, vec3(0.0f), vec3(10.0f));
		result += (diffuseBRDF + specularBRDF) * Lradiance * cosLi;
	}
	return result;
}

vec3 CalculateSpotLights(in vec3 F0, vec3 worldPos)
{
	vec3 result = vec3(0.0);
    uvec2 tileIndex = uvec2( floor(gl_FragCoord.xy / 16) );
    uint startOffset = imageLoad(u_SpotLightGrid, ivec2(tileIndex)).x;
	uint lightCount = imageLoad(u_SpotLightGrid, ivec2(tileIndex)).y;

    for ( uint i = 0; i < lightCount; i++ )
	{
	
        uint lightIndex = s_SpotLightIndexList[startOffset + i];
		SpotLight light = s_SpotLights.Lights[lightIndex];

		vec3 Li = normalize(light.Position - worldPos);
		float lightDistance = length(light.Position - worldPos);

		float cutoff = cos(radians(light.Angle * 0.5f));
		float scos = max(dot(Li, light.Direction), cutoff);
		float rim = (1.0 - scos) / (1.0 - cutoff);

		float attenuation = clamp(1.0 - (lightDistance * lightDistance) / (light.Range * light.Range), 0.0, 1.0);
		attenuation *= mix(attenuation, 1.0, light.Falloff);
		attenuation *= 1.0 - pow(max(rim, 0.001), light.AngleAttenuation);

		vec3 Lradiance = light.Colour * light.Intensity * attenuation;
		vec3 Lh = normalize(Li + m_Params.View);

		// Calculate angles between surface normal and various light vectors.
		float cosLi = max(0.0, dot(m_Params.Normal, Li));
		float cosLh = max(0.0, dot(m_Params.Normal, Lh));

		vec3 F = FresnelSchlickRoughness(max(0.0, dot(Lh, m_Params.View)),F0, m_Params.Roughness);
		float D = NdfGGX(cosLh, m_Params.Roughness);
		float G = GaSchlickGGX(cosLi, m_Params.NdotV, m_Params.Roughness);

		vec3 kd = (1.0 - F) * (1.0 - m_Params.Metalness);
		vec3 diffuseBRDF = kd * m_Params.AlbedoColor;

		// Cook-Torrance
		vec3 specularBRDF = (F * D * G) / max(Epsilon, 4.0 * cosLi * m_Params.NdotV);
		specularBRDF = clamp(specularBRDF, vec3(0.0f), vec3(10.0f));
		result += (diffuseBRDF + specularBRDF) * Lradiance * cosLi;
	}
	return result;
}
#endif
